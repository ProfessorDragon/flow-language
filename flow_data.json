{
	"categories": [
		{"name": "Control", "symbol": "C", "color": "gold", "blocks": [
			"if", "else", "else_if", "nested_if", "forever", "while", "until", "repeat", "iterate", "enumerate", "wait", "wait_until",
			"switch", "case", "case_default"
		]},
		{"name": "Events", "symbol": "E", "color": "peru", "blocks": [
			"run_script", "run_background_script", "stop_background_script", "dummy_script", "return_value", "break_loop", "continue_loop", "exit_program"
		]},
		{"name": "Operators", "symbol": "O", "color": "limegreen", "blocks": [
			"add", "subtract", "multiply", "divide", "power", "modulo", "equals", "not_equal", "gt", "lt", "gt_equal", "lt_equal", "and", "or", "not",
			"floor_divide", "safe_divide"
		]},
		{"name": "Data", "symbol": "D", "color": "lime", "blocks": [
			"length", "slice", "contains", "join", "join_array", "split", "lower", "upper", "in_range", "type", "to_string", "from_string", "repr",
			"max", "min", "sum", "special_operation", "dict_to_json", "json_to_dict", "random", "array_random", "array_shuffle", "distance_between_points"
		]},
		{"name": "Variables", "symbol": "V", "color": "darkorange", "blocks": [
			"var_value", "var_set", "var_increment", "var_swap",
			"array_item", "array_append", "array_insert", "array_pop", "array_replace", "array_extend", "array_index", "dict_get", "dict_set",
			"dict_reverse_pairs", "empty_array", "empty_dict"
		]},
		{"name": "File system", "symbol": "F", "color": "palegreen", "blocks": [
			"open_file", "close_file", "with_file", "truncate_file", "read_file", "write_file", "file_exists", "folder_exists", "delete_file"
		]},
		{"name": "Misc", "symbol": "M", "color": "gainsboro", "blocks": [
			"comment", "console_output", "console_input", "evaluate", "execute", "global", "import", "import_as", "set_recursion_limit"
		]},
		{"name": "Windows", "symbol": "Wi", "color": "lightblue", "requiremodule": "windows", "blocks": [
			"create_window", "set_window", "destroy_window", "show_window", "rename_window", "resize_window", "create_label", "change_widget_text", "toggle_widget_state", "create_button",
			"create_checkbutton", "checkbutton_value", "set_checkbutton_state", "create_entry", "entry_value", "add_entry_text", "clear_entry",
			"create_menu", "add_menu_command", "add_menu_cascade",
			"script_on_key_tk", "script_on_key_up_tk", "event_key_tk", "script_on_mouse_tk", "script_on_mouse_up_tk", "event_button_tk", "script_after_time",
			"get_screen_width", "get_screen_height", "force_refresh_window", "enable_resize", "disable_resize"
		]},
		{"name": "Canvas", "symbol": "Ca", "color": "mediumorchid", "requiremodule": "windows", "blocks": [
			"create_canvas", "set_canvas", "clear_canvas", "canvas_fill", "canvas_outline", "canvas_outline_width", "canvas_font",
			"create_line", "create_rect", "create_oval", "create_polygon", "create_text", "create_image", "create_arrow",
			"delete_object",
			"canvas_add_tag", "canvas_delete_tag", "canvas_get_tags", "canvas_bbox", "canvas_set_position", "canvas_change_position",
			"object_front", "object_back", "find_with_tag", "find_overlapping", "force_refresh_canvas"
		]},
		{"name": "Dialogs", "symbol": "Di", "color": "lightcoral", "requiremodule": "windows", "blocks": [
			"show_info", "show_error", "show_warning", "ask_yes_no", "ask_ok_cancel", "ask_yes_no_cancel", "ask_string", "ask_integer", "ask_float"
		]},
		{"name": "Keyboard", "symbol": "Kb", "color": "darkturquoise", "requiremodule": "keyboard", "blocks": [
			"key_pressed", "mouse_pressed", "mouse_x", "mouse_y", "press_release_key", "press_key", "release_key", "write_key",
			"press_mouse", "release_mouse", "click_mouse",
			"script_on_key", "script_on_key_up", "event_key", "script_on_mouse", "script_on_mouse_up", "block_until_key"
		]},
		{"name": "Automation", "symbol": "Au", "color": "lightsalmon", "requiremodule": "automation", "blocks": [
			"screenshot", "screenshot_region", "pag_pixel", "colors_match", "locate_center", "locate_center_grayscale",
			"all_windows", "active_window", "find_window_title", "window_title", "window_move", "window_resize",
			"window_focus", "window_maximize", "window_minimize", "window_restore"
		]},
		{"name": "Sound", "symbol": "So", "color": "deeppink", "requiremodule": ["playsound", "tts"], "blocks": [
			"play_sound", "play_background_sound", "text_to_speech", "tts_speed", "tts_voice"
		]},
		{"name": "System", "hidden": true, "color": "system", "blocks": [
			"script_start", "etc"
		]}
    ],
	"blocks": {
		"script_start": {"text": "Start script", "scaffold": "", "help": "The beginning of the script."},
		"etc": {"text": "...", "scaffold": "", "help": "Placeholder block."},
		
		"if": {"text": "If", "args": [["in", "Condition"], ["c"]], "scaffold": "if {0}:", "help": "If the condition is met, execute code."},
		"else": {"text": "Else", "args": [["c"]], "scaffold": "else:", "help": "Follows an if or else if. If none of the conditions are satisfied, execute code."},
		"else_if": {"text": "Else if", "args": [["in", "Condition"], ["c"]], "scaffold": "elif {0}:", "help": "Follows and if or else if. If none of the above conditions are satisfied but this one is, execute code."},
		"nested_if": {"text": "Nested if", "args": [["in", "Condition"], ["in", "Value if true"], ["in", "Value if false"]], "scaffold": "({1} if {0} else {2})", "help": "Returns value if true if the condition is met, otherwise it returns the value if false."},
		"switch": {"text": "Switch", "args": [["in", "Value"], ["c"]], "scaffold": "match {0}:", "help": "THE SWITCH STATEMENT HAS COME TO PYTHON!! Compares the value to specified cases. Use 'case' blocks inside to check for cases."},
		"case": {"text": "Case", "args": [["in", "Case"], ["c"]], "scaffold": "case {0}:", "help": "Goes inside of a switch block and compares with the value of the switch statement. If they are the same, execute code."},
		"case_default": {"text": "Default case", "args": [["c"]], "scaffold": "case _:", "help": "Goes at the end of a switch block. If none of the above cases match, execute code."},
		"repeat": {"text": "Repeat", "args": [["ni", "Repeat count"], ["vi", "Iterator variable"], ["c"]], "scaffold": "for {1} in range({0}):", "help": "Repeats code the specified amount of times with an iterator variable."},
		"iterate": {"text": "Loop over items", "args": [["in", "Array"], ["vi", "Item variable"], ["c"]], "scaffold": "for {1} in {0}:", "help": "Runs code once for each item in an array."},
		"enumerate": {"text": "Loop over items with index", "args": [["in", "Array"], ["vi", "Index variable"], ["vi", "Item variable"], ["c"]], "scaffold": "for {1}, {2} in enumerate({0}):", "help": "Iterates over an array with an index variable and item variable."},
		"while": {"text": "While", "args": [["in", "Condition"], ["c"]], "scaffold": "while {0}:", "help": "Repeat the code while the condition is true."},
		"until": {"text": "Until", "args": [["in", "Condition"], ["c"]], "scaffold": "while not ({0}):", "help": "Repeat the code until the condition is true."},
		"forever": {"text": "Forever", "args": [["c"]], "scaffold": "while True:", "help": "Repeats code forever."},
		"wait": {"text": "Wait", "args": [["ni", "Delay (seconds)"]], "scaffold": "time.sleep({0})", "help": "Waits the specified amount of seconds. Use run script after time if using 'windows' blocks."},
		"wait_until": {"text": "Wait until", "args": [["in", "Condition"]], "scaffold": "while not {0}: pass", "help": "Waits until the condition is true."},
		
		"run_script": {"text": "Run script", "args": [["si", "Script name"]], "scaffold": "{0}()", "help": "Runs a script."},
		"run_background_script": {"text": "Run script in background", "short": "Run background script", "args": [["si", "Script name"]], "scaffold": "Process(target={0})", "postscaffold": "{1}.start()", "help": "Runs a script in the background."},
		"stop_background_script": {"text": "Stop background script", "args": [["vi", "Script variable"]], "scaffold": "{0}.terminate()", "help": "Stops a background script."},
		"dummy_script": {"text": "Dummy script", "scaffold": "", "help": "Returns a dummy script which does nothing."},
		"return_value": {"text": "Return value", "short": "Return", "args": [["in", "Value"]], "scaffold": "return {0}", "help": "Returns a value and terminates the current script."},
		"break_loop": {"text": "Exit this loop", "short": "Break", "scaffold": "break", "help": "Exits the loop that the block is in."},
		"continue_loop": {"text": "Continue this loop", "short": "Continue", "scaffold": "continue", "help": "Continues to the next iteration of the loop that the block is in."},
		"exit_program": {"text": "Exit program", "short": "Exit", "scaffold": "exit()", "help": "Exits the program."},
		
		"add": {"text": "+", "args": [["ni", "Number 1"], ["ni", "Number 2"]], "scaffold": "({0} + {1})", "help": "Adds two numbers."},
		"subtract": {"text": "-", "args": [["ni", "Number 1"], ["ni", "Number 2"]], "scaffold": "({0} - {1})", "help": "Subtracts one number from the other."},
		"multiply": {"text": "*", "args": [["ni", "Number/string 1"], ["ni", "Number 2"]], "scaffold": "({0} * {1})", "help": "Multiplies two numbers or repeats text."},
		"divide": {"text": "/", "args": [["ni", "Number 1"], ["ni", "Number 2"]], "scaffold": "({0} / {1})", "help": "Divides one number by the other."},
		"floor_divide": {"text": "Floor divide", "args": [["ni", "Number 1"], ["ni", "Number 2"]], "scaffold": "({0} // {1})", "help": "Divides one number by the other and rounds down to the nearest whole number."},
		"safe_divide": {"text": "Safe divide", "args": [["ni", "Number 1"], ["ni", "Number 2"]], "scaffold": "_flow_safediv({0}, {1})", "help": "Divides one number by the other, but will return 0 if the denominator is 0."},
		"power": {"text": "^", "args": [["ni", "Number 1"], ["ni", "Number 2"]], "scaffold": "{0} ** {1}", "help": "Raises one number to the power of the other."},
		"modulo": {"text": "Mod", "args": [["ni", "Number 1"], ["ni", "Number 2"]], "scaffold": "{0} % {1}", "help": "Returns one number modulo the other."},
		"equals": {"text": "=", "args": [["ni", "Number/string 1"], ["ni", "Number/string 2"]], "scaffold": "{0} == {1}", "help": "Returns true if the arguments are the same."},
		"not_equal": {"text": "!=", "args": [["ni", "Number/string 1"], ["ni", "Number/string 2"]], "scaffold": "{0} != {1}", "help": "Returns true if the arguments are not the same."},
		"gt": {"text": ">", "args": [["ni", "Number 1"], ["ni", "Number 2"]], "scaffold": "{0} > {1}", "help": "Returns true if the first argument is greater than the second."},
		"lt": {"text": "<", "args": [["ni", "Number 1"], ["ni", "Number 2"]], "scaffold": "{0} < {1}", "help": "Returns true if the first argument is less than the second."},
		"gt_equal": {"text": ">=", "args": [["ni", "Number 1"], ["ni", "Number 2"]], "scaffold": "{0} >= {1}", "help": "Returns true if the first argument is greater than or equal to the second."},
		"lt_equal": {"text": "<=", "args": [["ni", "Number 1"], ["ni", "Number 2"]], "scaffold": "{0} <= {1}", "help": "Returns true if the first argument is less than or equal to the second."},
		"and": {"text": "And", "args": [["in", "Condition 1"], ["in", "Condition 2"]], "scaffold": "({0} and {1})", "help": "Returns true if both arguments are true."},
		"or": {"text": "Or", "args": [["in", "Condition 1"], ["in", "Condition 2"]], "scaffold": "({0} or {1})", "help": "Returns true if either or both of the arguments are true."},
		"not": {"text": "Not", "args": [["in", "Condition"]], "scaffold": "not {0}", "help": "Returns true if the argument is false, and returns false if the argument is true."},
		
		"length": {"text": "Length", "args": [["in", "String/array/dictionary"]], "scaffold": "len({0})", "help": "Returns the length of a string, array, or dictionary."},
		"slice": {"text": "Slice", "args": [["in", "String/array"], ["in", "Start (inclusive)"], ["in", "Stop (exclusive)"]], "scaffold": "{0}[{1}:{2}]", "help": "Slices a string or array with start index (inclusive) and stop index (exclusive). Leave start or stop blank to exclude."},
		"contains": {"text": "Contains", "args": [["in", "Base"], ["in", "Substring"]], "scaffold": "{1} in {0}", "help": "Returns true if the second argument is inside of the first."},
		"join": {"text": "Join text", "args": [["in", "String 1"], ["in", "String 2"]], "scaffold": "(str({0}) + str({1}))", "help": "Joins two segments of text."},
		"split": {"text": "Split text", "args": [["in", "Text"], ["in", "Separator"], ["ni", "Maximum splits"]], "scaffold": "_flow_split({0}, {1}, {2})", "help": "Splits text on a separator. If there is no separator, it will return a list with each letter being an element. If there is a separator, the maximum splits can be set, which can also be negative to split from the back. Leave it blank for no maximum."},
		"join_array": {"text": "Join array", "args": [["in", "Array"], ["in", "Separator"]], "scaffold": "{1}.join({0})", "help": "Forms an array into a string with each element separated by a value."},
		"lower": {"text": "Lower case", "short": "Lower", "args": [["in", "Text"]], "scaffold": "{0}.lower()", "help": "Converts text to lowercase."},
		"upper": {"text": "Upper case", "short": "Upper", "args": [["in", "Text"]], "scaffold": "{0}.upper()", "help": "Converts text to uppercase."},
		"in_range": {"text": "Number in range", "short": "In range", "args": [["ni", "Number"], ["ni", "Minimum (inclusive)"], ["ni", "Maximum (inclusive)"]], "scaffold": "{1} <= {0} <= {2}", "help": "Returns true if a number is inside of minimum and maximum values (inclusive)."},
		"to_string": {"text": "Convert to string", "args": [["in", "Number/array"]], "scaffold": "str({0})", "help": "Converts the argument to a string of text."},
		"from_string": {"text": "Convert from string", "args": [["in", "String"]], "scaffold": "_flow_fromstring({0})", "help": "Converts the argument from text to a number, array, or dictionary."},
		"repr": {"text": "Raw value", "args": [["in", "String"]], "scaffold": "repr({0})", "help": "Returns the string representation of the argument."},
		"type": {"text": "Object type", "short": "Type", "args": [["in", "Object"]], "scaffold": "type({0}).__name__", "help": "Returns the type of an object."},
		"dict_to_json": {"text": "Dictionary to JSON", "args": [["in", "Dictionary"]], "scaffold": "json.dumps({0})", "requiremodule": "json", "help": "Converts a dictionary to JSON (text form)."},
		"json_to_dict": {"text": "JSON to dictionary", "args": [["in", "JSON"]], "scaffold": "json.loads({0})", "requiremodule": "json", "help": "Converts JSON to a dictionary."},
		"random": {"text": "Random number", "short": "Random", "args": [["ni", "Minimum (inclusive)"], ["ni", "Maximum (inclusive)"]], "scaffold": "random.randint({0}, {1})", "requiremodule": "random", "help": "Generates a random number inside of a range."},
		"array_random": {"text": "Random value from array", "short": "Random array value", "args": [["in", "Array"]], "scaffold": "random.choice({0})", "requiremodule": "random", "help": "Returns a random item from an array."},
		"max": {"text": "Highest value", "short": "Max", "args": [["in", "Array"]], "scaffold": "max({0})", "help": "Returns the highest value in an array."},
		"min": {"text": "Lowest value", "short": "Min", "args": [["in", "Array"]], "scaffold": "min({0})", "help": "Returns the lowest value in an array."},
		"sum": {"text": "Sum of array", "short": "Sum", "args": [["in", "Array"]], "scaffold": "sum({0})", "help": "Returns the sum of values in an array with all numerical values."},
		"special_operation": {"text": "Special operation", "short": "Special op", "args": [["in", "Operation (round, ceil, floor, abs, sqrt, sin, cos, tan, asin, acos, atan, ln, log)"], ["ni", "Number"]], "scaffold": "_flow_specialop({0}, {1})", "help": "Calculates a special operation on a number which can be any of round, ceil, floor, abs, sqrt, sin, cos, tan, asin, acos, atan, ln, or log."},
		"distance_between_points": {"text": "Distance between points", "args": [["ni", "X1"], ["ni", "Y1"], ["ni", "X2"], ["ni", "Y2"]], "scaffold": "math.sqrt(({0} - {2})**2 + ({1} - {3})**2)", "help": "Returns the distance between two points on a linear plane."},
		
		"var_value": {"text": "Variable value", "short": "Variable", "args": [["vi", "Variable"]], "scaffold": "{0}", "help": "Returns the value of a variable."},
		"var_set": {"text": "Set variable", "short": "Set", "args": [["vi", "Variable"], ["in", "Value"]], "scaffold": "{0} = {1}", "help": "Sets a variable's value."},
		"var_increment": {"text": "Increment variable", "short": "Increment", "args": [["vi", "Variable"], ["ni", "Number/string"]], "scaffold": "{0} += {1}", "help": "Adds a value to a variable."},
		"var_swap": {"text": "Swap variable values", "short": "Swap values", "args": [["vi", "Variable 1"], ["vi", "Variable 2"]], "scaffold": "{0}, {1} = {1}, {0}", "help": "Swaps the values of two variables."},
		"array_item": {"text": "Value of array index", "short": "Array value", "args": [["in", "Array"], ["ni", "Index"]], "scaffold": "{0}[{1}]", "help": "Returns the value of an array's index."},
		"array_append": {"text": "Add to array", "short": "Append", "args": [["vi", "Array"], ["in", "Value"]], "scaffold": "{0}.append({1})", "help": "Adds a value to an array."},
		"array_insert": {"text": "Insert at array index", "short": "Insert at index", "args": [["vi", "Array"], ["ni", "Index"], ["in", "Value"]], "scaffold": "{0}.insert({1}, {2})", "help": "Inserts a value into a specified index in an array."},
		"array_pop": {"text": "Remove array index", "short": "Remove index", "args": [["in", "Array"], ["ni", "Index"]], "scaffold": "{0}.pop({1})", "help": "Removes an index of an array and returns the value."},
		"array_replace": {"text": "Set array index", "short": "Set index", "args": [["in", "Array"], ["ni", "Index"], ["in", "Value"]], "scaffold": "{0}[{1}] = {2}", "help": "Replaces an array index with a new value."},
		"array_extend": {"text": "Join arrays", "short": "Extend array", "args": [["vi", "Array 1"], ["in", "Array 2"]], "scaffold": "{0}.extend({1})", "help": "Adds every item from the second array to the first one. Does not return a value."},
		"array_index": {"text": "Index of array value", "short": "Index of value", "args": [["in", "Array"], ["in", "Value"]], "scaffold": "({0}.index({1}) if {1} in {0} else -1)", "help": "Returns the index of the first occurrence of a value within an array."},
		"dict_get": {"text": "Dictionary value", "short": "Dict value", "args": [["in", "Dictionary"], ["in", "Key"], ["in", "Default"]], "scaffold": "{0}.get({1}, {2})", "help": "Returns the value of a dictionary's key and returns a default value if not present."},
		"dict_set": {"text": "Set dictionary value", "short": "Set dict value", "args": [["vi", "Dictionary"], ["in", "Key"], ["in", "Value"]], "scaffold": "{0}[{1}] = {2}", "help": "Sets a dictionary key to a value."},
		"array_shuffle": {"text": "Shuffle array", "short": "Shuffle array", "args": [["vi", "Array"]], "scaffold": "random.shuffle({0})", "requiremodule": "random", "help": "Randomly shuffles the items of an array. Does not return the value."},
		"dict_reverse_pairs": {"text": "Swap keys and values", "args": [["in", "Dict"]], "scaffold": "{{v: k for k, v in {0}.items()}}", "help": "Returns the dictionary but keys are swapped with values and values are swapped with keys."},
		"empty_array": {"text": "Empty array", "short": "Array", "scaffold": "[]", "help": "Returns an empty array."},
		"empty_dict": {"text": "Empty dictionary", "short": "Dict", "scaffold": "{{}}", "help": "Returns an empty dictionary."},
		
		"play_sound": {"text": "Play sound", "args": [["in", "File path"]], "scaffold": "playsound({0})", "requiremodule": "playsound", "help": "Plays a sound from a file path."},
		"play_background_sound": {"text": "Play sound in background", "short": "Play background sound", "args": [["in", "File path"]], "requiremodule": "playsound", "scaffold": "Process(target=playsound, args=({0},))", "postscaffold": "{1}.start()", "help": "Plays a sound from a file path in the background."},
		"text_to_speech": {"text": "Speak text", "args": [["in", "Text to speak"], ["in", "File to save to (optional)"]], "scaffold": "_tts_speak({0}, {1})", "requiremodule": "tts", "help": "Speaks text out loud and saves it to a file if present."},
		"tts_speed": {"text": "Set TTS speed", "args": [["ni", "Speaking rate"]], "scaffold": "ttseng.setProperty('rate', {0})", "requiremodule": "tts", "help": "Changes the text-to-speech speaking rate."},
		"tts_voice": {"text": "Set TTS voice", "args": [["ni", "Voice number"]], "scaffold": "ttseng.setProperty('voice', ttsvoices[{0}].id)", "requiremodule": "tts", "help": "Changes the text-to-speech voice."},
		
		"key_pressed": {"text": "Key pressed", "args": [["in", "Key"]], "scaffold": "keyboard.is_pressed({0})", "help": "Returns true if a key is pressed."},
		"mouse_pressed": {"text": "Mouse pressed", "args": [["in", "Button (left, right, middle)"]], "scaffold": "mouse.is_pressed(button={0})", "help": "Returns true if a mouse button is pressed. The button can be left, right, or middle."},
		"mouse_x": {"text": "Mouse X", "scaffold": "mouse.get_position()[0]", "help": "Returns the X position of the mouse."},
		"mouse_y": {"text": "Mouse Y", "scaffold": "mouse.get_position()[1]", "help": "Returns the Y position of the mouse."},
		"press_key": {"text": "Press key", "args": [["in", "Key"]], "scaffold": "keyboard.press({0})", "help": "Presses a key on the keyboard. Use 'release key' to release it."},
		"release_key": {"text": "Release key", "args": [["in", "Key"]], "scaffold": "keyboard.release({0})", "help": "Releases a key on the keyboard."},
		"send_key": {"text": "Send key", "args": [["in", "Key"]], "scaffold": "keyboard.send({0})", "help": "Presses and releases a key on the keyboard (instantly)."},
		"press_release_key": {"text": "Press and release key", "args": [["in", "Key"], ["ni", "Delay (seconds)"]], "scaffold": "_kb_press_and_release({0}, {1})", "help": "Presses and releases a key on the keyboard for the specified duration."},
		"write_key": {"text": "Type text", "args": [["in", "Text"]], "scaffold": "keyboard.write({0})", "help": "Simulates text being written instantly."},
		"move_mouse": {"text": "Move mouse", "args": [["ni", "X"], ["ni", "Y"]], "scaffold": "mouse.move({0}, {1})", "help": "Moves the mouse to the specified position."},
		"press_mouse": {"text": "Press mouse", "args": [["in", "Button"]], "scaffold": "mouse.press(button={0})", "help": "Presses a mouse button (left, right, or middle)."},
		"release_mouse": {"text": "Release mouse", "args": [["in", "Button"]], "scaffold": "mouse.release(button={0})", "help": "Releases a mouse button (left, right, or middle)."},
		"click_mouse": {"text": "Click mouse", "args": [["in", "Button"]], "scaffold": "mouse.release(button={0})", "help": "Presses and releases a mouse button (left, right, or middle)."},
		"script_on_key": {"text": "Run script on key", "args": [["si", "Script"]], "scaffold": "keyboard.on_press({0})", "help": "Runs a script when any key is pressed. Use the 'event key' block to get the key which was pressed."},
		"script_on_key_up": {"text": "Run script on key up", "args": [["si", "Script"]], "scaffold": "keyboard.on_release({0})", "help": "Runs a script when any key is released. Use the 'event key' block to get the key which was released."},
		"event_key": {"text": "Event key", "scaffold": "event.name", "help": "Returns the key pressed from 'run script on key' blocks."},
		"script_on_mouse": {"text": "Run script on click", "args": [["in", "Button"], ["si", "Script"]], "scaffold": "mouse.on_button({1}, buttons=({0},), types=('down', 'double'))", "help": "Runs a script when a mouse button is pressed."},
		"script_on_mouse_up": {"text": "Run script on mouse up", "args": [["in", "Button"], ["si", "Script"]], "scaffold": "mouse.on_button({1}, buttons=({0},), types=('up',))", "help": "Runs a script when a mouse button is released."},
		"block_until_key": {"text": "Wait until key down", "args": [["in", "Key"]], "scaffold": "keyboard.wait({0})", "help": "Waits until a key is pressed. Leave blank to wait forever."},

		"screenshot": {"text": "Take screenshot", "args": [["in", "Filename"]], "scaffold": "pag.screenshot({0})", "help": "Saves a screenshot of the primary monitor."},
		"screenshot_region": {"text": "Take screenshot of region", "args": [["in", "Filename"], ["ni", "X (Left)"], ["ni", "Y (Top)"], ["ni", "Width"], ["ni", "Height"]], "scaffold": "pag.screenshot({0}, region=({1}, {2}, {3}, {4}))", "help": "Saves a screenshot of the primary monitor."},
		"pag_pixel": {"text": "Pixel color", "args": [["ni", "X position"], ["ni", "Y position"]], "scaffold": "pag.pixel({0}, {1})", "help": "Retrieves the RGB color value of a pixel on screen."},
		"colors_match": {"text": "Colors match", "args": [["in", "Color 1"], ["in", "Color 2"], ["ni", "Tolerance"]], "scaffold": "_pag_colors_match({0}, {1}, {2})", "help": "Determines if two color values are the same, within the specified tolerance range."},
		"locate_center": {"text": "Locate image", "args": [["in", "Image path"]], "scaffold": "pag.locateCenterOnScreen({0})", "help": "Attempts to find an image on the screen and returns an array containing the X and Y positions of the center of the image if successful. Returns none if not found."},
		"locate_center_grayscale": {"text": "Locate image grayscale", "args": [["in", "Image path"]], "scaffold": "pag.locateCenterOnScreen({0}, grayscale=True)", "help": "Attempts to find an image on the screen and returns an array containing the X and Y positions of the center of the image if successful. Returns none if not found. This method is faster than the non-grayscale variant due to only attempting to match the brightness of pixels, but may produce false positives."},
		"all_windows": {"text": "Get all windows", "scaffold": "pag.getAllWindows()", "help": "Returns an array containing every open window."},
		"active_window": {"text": "Get active window", "scaffold": "pag.getActiveWindow()", "help": "Returns the currently focused window."},
		"find_window_title": {"text": "Find window with title", "args": [["in", "Title"]], "scaffold": "next((win for win in pag.getAllWindows() if {0}.lower() in win.title.lower()), None)", "help": "Returns the window where the title contains the specified text, or none if not found."},
		"window_title": {"text": "Window title", "args": [["in", "Window"]], "scaffold": "{0}.title", "help": "Returns the title of the specified window."},
		"window_move": {"text": "Move window", "args": [["in", "Window"], ["ni", "X"], ["ni", "Y"]], "scaffold": "{0}.moveTo({1}, {2})", "help": "Moves the specified window."},
		"window_resize": {"text": "Resize window", "args": [["in", "Window"], ["ni", "Width"], ["ni", "Height"]], "scaffold": "{0}.resizeTo({1}, {2})", "help": "Resizes the specified window."},
		"window_focus": {"text": "Focus window", "args": [["in", "Window"]], "scaffold": "{0}.activate()", "help": "Focuses the specified window."},
		"window_maximize": {"text": "Maximize window", "args": [["in", "Window"]], "scaffold": "{0}.maximize()", "help": "Maximizes the specified window."},
		"window_minimize": {"text": "Minimize window", "args": [["in", "Window"]], "scaffold": "{0}.minimize()", "help": "Minimizes the specified window."},
		"window_restore": {"text": "Unminimize window", "args": [["in", "Window"]], "scaffold": "{0}.restore()", "help": "Restores the specified window to the state where it's neither maximized nor minimized."},
		
		"open_file": {"text": "Open file", "args": [["in", "File path"], ["in", "Mode (r, a, w)"]], "scaffold": "open({0}, {1})", "help": "Opens a file from a file path and returns the handler. The mode can be r (read), a (append), or w (write and truncate)."},
		"close_file": {"text": "Close file", "args": [["vi", "File handler"]], "scaffold": "{0}.close()", "help": "Closes a file."},
		"with_file": {"text": "Open file temporarily", "short": "With file", "args": [["in", "File path"], ["in", "Mode (r, a, w)"], ["vi", "Variable name"], ["c"]], "scaffold": "with open({0}, {1}) as {2}:", "help": "Opens a file temporarily, and stores the handler in a variable. The file gets automatically closed once the code inside the block has finished."},
		"truncate_file": {"text": "Truncate file", "args": [["vi", "File handler"]], "scaffold": "{0}.truncate()", "help": "Deletes everything inside of a file."},
		"read_file": {"text": "Read from file", "short": "Read file", "args": [["vi", "File handler"]], "scaffold": "{0}.read()", "help": "Reads text from a file."},
		"write_file": {"text": "Write to file", "short": "Write file", "args": [["vi", "File handler"], ["in", "Text"]], "scaffold": "{0}.write({1})", "help": "Writes text to a file."},
		"file_exists": {"text": "File exists", "args": [["in", "File path"]], "scaffold": "os.path.isfile({0})", "help": "Returns true if a file path exists."},
		"folder_exists": {"text": "Folder exists", "args": [["in", "Folder path"]], "scaffold": "os.path.isdir({1})", "help": "Returns true if a folder path exists."},
		"delete_file": {"text": "Delete file", "args": [["in", "File path"]], "scaffold": "os.remove({0})", "help": "Permanently deletes a file. This cannot be undone!"},
		
		"create_window": {"text": "Create window", "args": [["in", "Window title"]], "scaffold": "tk.Tk()", "postscaffold": "tkvars['window'] = {1}\ntkvars['window'].title({0})", "help": "Creates a window. Use 'show window and wait' to show it."},
		"set_window": {"text": "Set active window", "args": [["vi", "Window variable"]], "scaffold": "tkvars['window'] = {0}", "help": "Sets the active window to be used in future window commands."},
		"destroy_window": {"text": "Destroy window", "scaffold": "tkvars['window'].destroy()", "help": "Destroys the active window."},
		"show_window": {"text": "Show window and wait", "scaffold": "tkvars['window'].mainloop()", "help": "Shows the active window and waits until it gets closed."},
		"rename_window": {"text": "Rename window", "args": [["in", "Window title"]], "scaffold": "tkvars['window'].title({0})", "help": "Renames the active window."},
		"resize_window": {"text": "Resize window", "args": [["ni", "X size"], ["ni", "Y size"]], "scaffold": "tkvars['window'].geometry(str({0})+'x'+str({1}))", "help": "Resizes the active window."},
		"disable_resize": {"text": "Prevent resizing window", "short": "Prevent resizing", "scaffold": "tkvars['window'].resizable(False, False)", "help": "Prevents the user from resizing the window."},
		"enable_resize": {"text": "Allow resizing window", "short": "Allow resizing", "scaffold": "tkvars['window'].resizable(True, True)", "help": "Allows the user to resize the window."},
		"create_frame": {"text": "Create frame", "scaffold": "_tk_packed(tk.Frame(tkvars['window']))", "help": "Creates an empty frame in the active window."},
		"create_label": {"text": "Create label", "args": [["in", "Text"]], "scaffold": "_tk_packed(tk.Label(tkvars['window'], text={0}))", "help": "Creates a text object in the active window."},
		"change_widget_text": {"text": "Set widget text", "args": [["vi", "Widget variable"], ["in", "Text"]], "scaffold": "{0}['text'] = {1}", "help": "Changes the text of a label or button."},
		"toggle_widget_state": {"text": "Toggle widget state", "args": [["vi", "Widget variable"], ["in", "Enabled"]], "scaffold": "{0}['state'] = NORMAL if {1} else DISABLED", "help": "Enables or disables a widget."},
		"create_button": {"text": "Create button", "args": [["in", "Text"], ["si", "Script"]], "scaffold": "_tk_packed(tk.Button(tkvars['window'], text={0}, command={1}))", "help": "Creates a button in the active window which will run a script when clicked."},
		"create_checkbutton": {"text": "Create checkbutton", "args": [["in", "Text"]], "scaffold": "IntVar()", "postscaffold": "_tk_packed(tk.Checkbutton(tkvars['window'], text={0}, variable={1}))"},
		"checkbutton_value": {"text": "Checkbutton state", "args": [["vi", "Checkbutton variable"]], "scaffold": "bool({0}.get())", "help": "Returns true if a checkbutton is checked, otherwise false."},
		"set_checkbutton_state": {"text": "Set checkbutton state", "args": [["vi", "Checkbutton variable"], ["in", "Checked"]], "scaffold": "{0}.set(int({1}))", "help": "Sets the state of a checkbutton."},
		"create_entry": {"text": "Create entry", "scaffold": "_tk_packed(tk.Entry(tkvars['window']))", "help": "Creates a text entry in the active window."},
		"entry_value": {"text": "Entry text", "args": [["vi", "Entry variable"]], "scaffold": "{0}.get()", "help": "Returns the text of an entry."},
		"add_entry_text": {"text": "Add text to entry", "args": [["vi", "Entry variable"], ["in", "Text"]], "scaffold": "{0}.insert(END, {1})", "help": "Adds text to the end of an entry."},
		"clear_entry": {"text": "Clear entry", "args": [["vi", "Entry variable"]], "scaffold": "{0}.delete(0, END)", "help": "Clears the text of an entry."},
		"create_menu": {"text": "Create menu", "scaffold": "Menu(tkvars['window'], tearoff=False)", "postscaffold": "tkvars['window'].configure(menu={0})", "help": "Creates a dropdown menu on the current window."},
		"add_menu_command": {"text": "Add menu command", "args": [["vi", "Menu variable"], ["in", "Text"], ["si", "Script"]], "scaffold": "{0}.add_command(label={1}, command={2})", "help": "Adds a clickable label to a menu which runs a script when clicked."},
		"add_menu_cascade": {"text": "Add menu cascade", "args": [["vi", "Menu variable (base)"], ["vi", "Menu variable (cascade)"], ["in", "Text"]], "scaffold": "{0}.add_cascade(label={2}, menu={1})", "help": "Adds a menu to another menu."},
		"add_menu_separator": {"text": "Add menu separator", "args": [["vi", "Menu variable"]], "scaffold": "{0}.add_separator()", "help": "Adds a separator element to a menu."},
		"script_on_key_tk": {"text": "Run script on key", "args": [["si", "Script"]], "scaffold": "tkvars['window'].bind('<Key>', {0})", "help": "Runs a script when a key is pressed. Use the 'event key' block to get the key which was pressed."},
		"script_on_key_up_tk": {"text": "Run script on key up", "args": [["si", "Script"]], "scaffold": "tkvars['window'].bind('<KeyRelease>', {0})", "help": "Runs a script when a key is released. Use the 'event key' block to get the key which was pressed."},
		"event_key_tk": {"text": "Event key", "scaffold": "event.keysym", "help": "Returns the key pressed from 'run script on key' blocks."},
		"script_on_mouse_tk": {"text": "Run script on click", "args": [["vi", "Window/widget"], ["in", "Button"], ["si", "Script"]], "scaffold": "{0}.bind(_tk_button({1}), {2})", "help": "Runs a script when a mouse button is pressed over a widget or window."},
		"script_on_mouse_up_tk": {"text": "Run script on mouse up", "args": [["vi", "Window/widget"], ["in", "Button"], ["si", "Script"]], "scaffold": "{0}.bind(_tk_button({1}, release=True), {2})", "help": "Runs a script when a mouse button is released over a widget or window."},
		"event_button_tk": {"text": "Event button number", "scaffold": "event.num", "help": "Returns the mouse button number from 'run script on click' blocks."},
		"script_after_time": {"text": "Run script after delay", "args": [["si", "Script"], ["ni", "Delay (milliseconds)"]], "scaffold": "tkvars['window'].after(int({1}), {0})", "help": "Runs a script after the specified amount of milliseconds (not seconds!)."},
		"script_on_close": {"text": "Run script when closed", "args": [["si", "Script"]], "scaffold": "tkvars['window'].protocol('WM_DELETE_WINDOW', {0})", "help": "Runs a script when the active window is closed."},
		"get_screen_width": {"text": "Get screen width", "scaffold": "tkvars['window'].winfo_screenwidth()", "help": "Returns the width of the screen."},
		"get_screen_height": {"text": "Get screen height", "scaffold": "tkvars['window'].winfo_screenheight()", "help": "Returns the height of the screen."},
		"force_refresh_window": {"text": "Force refresh window", "scaffold": "tkvars['window'].update()", "help": "Forces a window refresh."},
		
		"create_canvas": {"text": "Create canvas", "args": [["ni", "Width"], ["ni", "Height"]], "scaffold": "tk.Canvas(tkvars['window'], width={0}, height={1}, background=tkvars['fill'], highlightbackground=tkvars['outline'], highlightthickness=tkvars['outlinewidth'])", "postscaffold": "tkvars['canvas'] = {2}\ntkvars['canvas'].pack()", "help": "Creates a canvas on the active window."},
		"set_canvas": {"text": "Set active canvas", "args": [["vi", "Canvas variable"]], "scaffold": "tkvars['canvas'] = {0}", "help": "Sets the canvas to be used in future canvas commands."},
		"canvas_fill": {"text": "Set fill color", "args": [["in", "Color"]], "scaffold": "tkvars['fill'] = {0}", "help": "Sets the fill/background color to be automatically applied in future canvas commands."},
		"canvas_outline": {"text": "Set outline color", "args": [["in", "Color"]], "scaffold": "tkvars['outline'] = {0}", "help": "Sets the outline color to be automatically applied in future canvas commands."},
		"canvas_outline_width": {"text": "Set outline width", "args": [["ni", "Thickness"]], "scaffold": "tkvars['outlinewidth'] = {0}", "help": "Sets the outline width to be automatically applied in future canvas commands."},
		"canvas_font": {"text": "Set text font", "args": [["in", "Name"], ["ni", "Size"], ["in", "Modifiers (bold, italic, etc)"]], "scaffold": "tkvars['font'] = ({0}, {1}, {2})", "help": "Sets the font name, size, and modifiers (bold, italic, etc) to be automatically applied in future canvas commands."},
		"create_line": {"text": "Create line", "args": [["ni", "X1"], ["ni", "Y1"], ["ni", "X2"], ["ni", "Y2"]], "scaffold": "tkvars['canvas'].create_line({0}, {1}, {2}, {3}, fill=tkvars['fill'], width=tkvars['outlinewidth'])", "help": "Creates a line on the active canvas."},
		"create_arrow": {"text": "Create arrow", "args": [["ni", "X1"], ["ni", "Y1"], ["ni", "X2"], ["ni", "Y2"]], "scaffold": "tkvars['canvas'].create_line({0}, {1}, {2}, {3}, fill=tkvars['fill'], width=tkvars['outlinewidth'], arrow='last')", "help": "Creates an arrow on the active canvas. Similar to a line, but with an arrowhead at X2, Y2."},
		"create_rect": {"text": "Create rectangle", "short": "Create rect", "args": [["ni", "X position"], ["ni", "Y position"], ["ni", "Width"], ["ni", "Height"]], "scaffold": "_tk_create_rect({0}, {1}, {2}, {3}, fill=tkvars['fill'], outline=tkvars['outline'], width=tkvars['outlinewidth'])", "help": "Creates a rectangle on the active canvas."},
		"create_oval": {"text": "Create oval", "args": [["ni", "X position"], ["ni", "Y position"], ["ni", "Width"], ["ni", "Height"]], "scaffold": "_tk_create_oval({0}, {1}, {2}, {3}, fill=tkvars['fill'], outline=tkvars['outline'], width=tkvars['outlinewidth'])", "help": "Creates an oval on the active canvas."},
		"create_polygon": {"text": "Create polygon", "args": [["in", "Points array"]], "scaffold": "tkvars['canvas'].create_polygon({0}, fill=tkvars['fill'], outline=tkvars['outline'], width=tkvars['outlinewidth'])", "help": "Creates a polygon using an array of points on the active canvas."},
		"create_text": {"text": "Create text", "args": [["ni", "X position"], ["ni", "Y position"], ["in", "Text"], ["in", "Anchor (n, w, e, s, nw, ne, sw, se, center)"]], "scaffold": "tkvars['canvas'].create_text({0}, {1}, text={2}, anchor={3}, fill=tkvars['fill'], font=tkvars['font'])", "help": "Creates text on the active canvas. The anchor can be n, w, e, s, nw, ne, sw, se, or center."},
		"create_image": {"text": "Create image", "args": [["ni", "X position"], ["ni", "Y position"], ["in", "Image path"]], "scaffold": "tkvars['canvas'].create_image({0}, {1}, image=PhotoImage(file={2}), anchor=NW)", "help": "Creates an image from a file path on the active canvas."},
		"clear_canvas": {"text": "Clear canvas", "scaffold": "tkvars['canvas'].delete('all')", "help": "Delets every object on the canvas."},
		"delete_object": {"text": "Delete object or tag", "args": [["in", "Object/tag"]], "scaffold": "tkvars['canvas'].delete({0})", "help": "Deletes an object or tag."},
		"canvas_set_position": {"text": "Set object position", "short": "Set position", "args": [["in", "Object"], ["ni", "X position"], ["ni", "Y position"]], "scaffold": "_tk_set_position({0}, {1}, {2})", "help": "Sets the position of an object."},
		"canvas_change_position": {"text": "Change object position", "short": "Change position", "args": [["in", "Object/tag"], ["ni", "X amount"], ["ni", "Y amount"]], "scaffold": "tkvars['canvas'].move({0}, {1}, {2})", "help": "Moves an object or tag relative to where it already is."},
		"canvas_add_tag": {"text": "Add tag", "args": [["in", "Object/tag"], ["in", "Tag"]], "scaffold": "tkvars['canvas'].addtag_withtag({1}, {0})", "help": "Adds a tag to an object or tag."},
		"canvas_delete_tag": {"text": "Remove tag", "args": [["in", "Object"], ["in", "Tag"]], "scaffold": "tkvars['canvas'].dtag({0}, {1})", "help": "Removes a tag from an object."},
		"canvas_get_tags": {"text": "Get object tags", "short": "Object tags", "args": [["in", "Object"]], "scaffold": "tkvars['canvas'].gettags({0})", "help": "Returns an array of the tags of an object."},
		"canvas_bbox": {"text": "Object bounding box", "short": "Object bbox", "args": [["in", "Object"]], "scaffold": "tkvars['canvas'].bbox({0})", "help": "Returns the bounding box of an object in the form of x, y, x2, y2."},
		"object_front": {"text": "Move object to front", "args": [["in", "Object/tag"]], "scaffold": "tkvars['canvas'].tag_raise({0})", "help": "Moves an object or tag to the front layer."},
		"object_back": {"text": "Move object to back", "args": [["in", "Object/tag"]], "scaffold": "tkvars['canvas'].tag_lower({0})", "help": "Moves an object or tag to the back layer."},
		"find_with_tag": {"text": "Find objects with tag", "args": [["in", "Tag"]], "scaffold": "tkvars['canvas'].find_withtag({0})", "help": "Returns an array of object IDs which have a common tag."},
		"find_overlapping": {"text": "Find overlapping", "args": [["in", "Object/tag"]], "scaffold": "_tk_find_overlap({0})", "help": "Returns an array of the objects that overlap with an object or tag."},
		"force_refresh_canvas": {"text": "Force refresh canvas", "scaffold": "tkvars['canvas'].update()", "help": "Forces a canvas refresh."},
		
		"show_info": {"text": "Show information", "short": "Show info", "args": [["in", "Title"], ["in", "Body text"]], "scaffold": "tkmb.showinfo({0}, {1})", "help": "Shows an information dialog."},
		"show_error": {"text": "Show error", "args": [["in", "Title"], ["in", "Body text"]], "scaffold": "tkmb.showerror({0}, {1})", "help": "Shows an error dialog."},
		"show_warning": {"text": "Show warning", "args": [["in", "Title"], ["in", "Body text"]], "scaffold": "tkmb.showwarning({0}, {1})", "help": "Shows a warning dialog."},
		"ask_yes_no": {"text": "Ask yes/no", "args": [["in", "Title"], ["in", "Body text"]], "scaffold": "tkmb.askyesno({0}, {1})", "help": "Shows a yes/no dialog. Returns true if yes is clicked or false if no is clicked."},
		"ask_ok_cancel": {"text": "Ask OK/cancel", "args": [["in", "Title"], ["in", "Body text"]], "scaffold": "tkmb.askokcancel({0}, {1})", "help": "Shows an ok/cancel dialog. Returns true if OK clicked or false if cancel is clicked."},
		"ask_yes_no_cancel": {"text": "Ask yes/no/cancel", "args": [["in", "Title"], ["in", "Body text"]], "scaffold": "tkmb.askyesnocancel({0}, {1})", "help": "Shows a yes/no/cancel dialog. Returns true if yes is clicked, false if no is clicked, or none if cancel is clicked."},
		"ask_string": {"text": "Ask string input", "short": "Ask string", "args": [["in", "Title"], ["in", "Prompt"], ["in", "Initial text"]], "scaffold": "tksd.askstring({0}, {1}, initialvalue={2})", "help": "Shows a text input dialog. Returns the text if OK is clicked, or none if cancel is clicked."},
		"ask_integer": {"text": "Ask whole number input", "short": "Ask integer", "args": [["in", "Title"], ["in", "Prompt"], ["ni", "Initial value"]], "scaffold": "tksd.askinteger({0}, {1}, initialvalue={2})", "help": "Shows a whole number input dialog. Returns the number if OK is clicked, or none if cancel is clicked."},
		"ask_float": {"text": "Ask floating point input", "short": "Ask float", "args": [["in", "Title"], ["in", "Prompt"], ["ni", "Initial value"]], "scaffold": "tksd.askfloat({0}, {1}, initialvalue={2})", "help": "Shows a floating point number input dialog. Returns the number if OK is clicked, or none if cancel is clicked."},
		
		"comment": {"text": "Comment", "args": [["oi", "Comment"]], "scaffold": "# {0}", "help": "Does nothing. You can leave a comment to yourself with the argument provided."},
		"console_output": {"text": "Console output", "short": "Console out", "args": [["in", "Text"]], "scaffold": "print({0})", "help": "Outputs text to the console."},
		"console_input": {"text": "Console input", "short": "Console in", "args": [["in", "Prompt"]], "scaffold": "input({0})", "help": "Inputs text from the user in the console with a prompt."},
		"evaluate": {"text": "Evaluate Python code", "short": "Eval", "args": [["in", "Code"]], "scaffold": "eval({0}, globals(), locals())", "help": "Evaluates Python code. This returns the result, unlike 'execute python code'."},
		"execute": {"text": "Execute Python code", "short": "Exec", "args": [["in", "Code"]], "scaffold": "exec({0}, globals(), locals())", "help": "Executes Python code. This does not return the result like 'evaluate python code', but instead can be used for things like settings variables."},
		"import": {"text": "Import module", "short": "Import", "args": [["vi", "Module name"]], "scaffold": "import {0}", "help": "Imports a Python module."},
		"import_as": {"text": "Import module as", "short": "Import as", "args": [["vi", "Module name"], ["vi", "Import as"]], "scaffold": "import {0} as {1}", "help": "Imports a Python module and store it under a different name."},
		"global": {"text": "Use global variable", "args": [["vi", "Variable"]], "scaffold": "global {0}", "help": "Registers a variable as a global variable."},
		"set_recursion_limit": {"text": "Set recursion limit", "args": [["ni", "Limit (default: 1000)"]], "scaffold": "sys.setrecursionlimit({0})", "help": "Sets the recursion limit for the program. The default value is 1000."}
    }
}